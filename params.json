{"name":"Pkgr","body":"# pkgr\r\n\r\nPlug this [Railtie](http://api.rubyonrails.org/classes/Rails/Railtie.html)\r\ninto your Rails 3 app (ruby1.9 only), and you'll be ready to package your\r\nRails app as a DEB package. RPM support could be added in the short future.\r\n\r\n<a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-via=\"crohr\" data-size=\"large\">Tweet</a>\r\n<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script>\r\n\r\n## Why?\r\n\r\n[Capistrano](http://capify.org/) is great for deploying Rails/Ruby\r\napplications, but the deployment recipe can quickly become a mess, and scaling\r\nthe deployment to more than a few servers can prove to be difficult. Plus, if\r\nyou're already using automation tools such as\r\n[Puppet](http://www.puppetlabs.com/) to configure your servers, you have to\r\nrun two different processes to configure your infrastructure.\r\n\r\nAnother issue with Capistrano is that the hook system is not that powerful.\r\nCompare that with the pre/post-install/upgrade/uninstall steps that you can\r\ndefine in a RPM or DEB package, and you'll quickly see the advantage of\r\nletting a robust package manager such as `apt` or `yum` handle all those\r\nthings for you in a reliable manner.\r\n\r\nLast thing, once you built your RPM or DEB package and you tested that it\r\nworks once, you can deploy it on any number of servers at any time and you're\r\nsure that it will install the required package dependencies, run the hooks,\r\nand put the files in the directories you specified, creating them as needed.\r\nThen, you can downgrade or uninstall the whole application in one command.\r\n\r\n## How?\r\n\r\nThe issue with Ruby applications is that most of the gems are not (yet)\r\npackaged in the various Linux distributions. And even if they were, installing\r\nmultiple Ruby applications that need two different versions of the same Ruby\r\nlibrary would be impossible, since you can't install two different (minor)\r\nversions of a library with the package managers.\r\n\r\nSo, how are we going to easily package Ruby applications and avoid dependency\r\nissues? Well, I know package maintainers will scream at me, but we'll just\r\nvendor the required gems in the package we'll build, and use bundler to manage\r\nthose dependencies. Thus, the only dependency we'll put in our package will be\r\nthe Ruby1.9 (+rubygems).\r\n\r\n## What?\r\n\r\nThis gem will allow you to package your Rails3 application, create an `init.d`\r\nscript for you, install a binary file to start your app/rake tasks/console,\r\nput your configuration files in `/etc/app-name/`, setup a proper logrotate\r\nfile so that your log files don't eat all the disk space of your server, and a\r\nfew other things.\r\n\r\nThe default target installation directory for the other app files will be\r\n`/opt/local/app-name`. This can be configured.\r\n\r\n## Getting started\r\n\r\nOr, how to build a debian package of your Rails app in 5 minutes.\r\n\r\n### Setup\r\n\r\nCreate a new Rails app:\r\n\r\n    $ rails new my-app --skip-bundle\r\n          create  \r\n          create  README.rdoc\r\n          create  Rakefile\r\n          ...\r\n          create  vendor/plugins\r\n          create  vendor/plugins/.gitkeep\r\n\r\nGo into your app directory, and add `pkgr` to your Gemfile:\r\n\r\n    $ cd my-app\r\n    $ echo \"gem 'pkgr', :group => :development\" >> Gemfile\r\n\r\nFor now, this packaging tool only supports `thin` (would be easy to add others, though), so add it to your Gemfile:\r\n\r\n    $ echo \"gem 'thin'\" >> Gemfile\r\n\r\nInstall the gems:\r\n\r\n    $ bundle install\r\n\r\nIf it's not already done, initialize a git repository and create a first commit:\r\n\r\n    $ git init\r\n    $ git add .\r\n    $ git commit -m \"First commit\"\r\n\r\nSetup `pkgr`:\r\n\r\n    $ rake pkgr:setup\r\n    Setting up configuration file...\r\n    ...\r\n    Edit '/Users/crohr/tmp/my-app/config/pkgr.yml' and fill in the required information, then enter 'rake pkgr:generate' to generate the debian files.\r\n\r\nAs outlined, edit `config/pkgr.yml` and fill in your app name. In our example I'll fill in `my-app` as the app name. Also, you should edit the runtime and build dependencies (though the default ones should be fine with a base Rails app).\r\n\r\n### Generate the packaging files\r\n\r\nNow generate the required files for packaging:\r\n\r\n    $ rake pkgr:generate\r\n    mkdir -p /Users/crohr/tmp/my-app/debian\r\n    cp /Users/crohr/.rvm/gems/ruby-1.9.3-p125/gems/pkgr-0.1.0/lib/pkgr/data/debian/changelog /Users/crohr/tmp/my-app/debian/changelog\r\n    cp /Users/crohr/.rvm/gems/ruby-1.9.3-p125/gems/pkgr-0.1.0/lib/pkgr/data/debian/cron.d /Users/crohr/tmp/my-app/debian/cron.d\r\n    Correctly set up debian files.\r\n    mkdir -p /Users/crohr/tmp/my-app/bin\r\n    cp /Users/crohr/.rvm/gems/ruby-1.9.3-p125/gems/pkgr-0.1.0/lib/pkgr/data/bin/executable /Users/crohr/tmp/my-app/bin/my-app\r\n    chmod 755 /Users/crohr/tmp/my-app/bin/my-app\r\n    Correctly set up executable file. Try running './bin/my-app console'.\r\n\r\nThis will have created the required `debian/` files, plus an executable for your app, so that you're able to do the following:\r\n\r\n    $ ./bin/my-app console development\r\n    $ ./bin/my-app server start -e development\r\n    $ ./bin/my-app rake some_task\r\n\r\nThis is especially useful when the app is deployed on a server, since the executable will be added to the path!\r\n\r\nBy default, you should not have to change anything in the `debian/` folder, so let's package our app. \r\n\r\n### Package the app\r\n\r\nFirst, make sure you committed all your changes:\r\n\r\n    $ git add .\r\n    $ git commit -m \"...\"\r\n\r\nThen increase the version number:\r\n\r\n    $ rake pkgr:bump:minor\r\n    Committing changelog and version file...\r\n    git add debian/changelog /Users/crohr/tmp/my-app/config/pkgr.yml && git commit -m 'v0.1.0' debian/changelog /Users/crohr/tmp/my-app/config/pkgr.yml\r\n    [master c05dd73] v0.1.0\r\n     2 files changed, 29 insertions(+), 31 deletions(-)\r\n     rewrite config/pkgr.yml (82%)\r\n     create mode 100755 debian/changelog\r\n\r\nMake sure you do not have any staged change (otherwise, commit them):\r\n\r\n    $ git status\r\n    # On branch master\r\n    nothing to commit (working directory clean)\r\n\r\nFinally, ask to build the package on a machine running Debian Squeeze (I generally use my SSH config file to handle the SSH connection details for the specified host):\r\n\r\n    $ HOST=debian-build-machine rake pkgr:build:deb\r\n\r\nAfter some time, you should get a final line with the name of your debian package:\r\n\r\n    [... lots of lines ...]\r\n    my-app_0.1.0-1_amd64.deb\r\n\r\nMake sure it is really here:\r\n\r\n    $ ls -l pkg/\r\n    total 12128\r\n    -rw-r--r--  1 crohr  staff  6207392 May  4 10:57 my-app_0.1.0-1_amd64.deb\r\n\r\n### Use it\r\n\r\nNow you can either upload it to an apt repository (if you have one, I'll make a tutorial on how to set up a simple one), or just test that the package works by installing it on your build machine (or another one, for that matter, but you'll have to manually re-install the dependencies):\r\n\r\n    $ scp pkg/my-app_0.1.0-1_amd64.deb debian-build-machine:/tmp/\r\n    $ ssh debian-build-machine\r\n    debian-build-machine $ sudo dpkg -i /tmp/my-app_0.1.0-1_amd64.deb\r\n    Selecting previously deselected package my-app.\r\n    (Reading database ... 53073 files and directories currently installed.)\r\n    Unpacking my-app (from /tmp/my-app_0.1.0-1_amd64.deb) ...\r\n    Setting up my-app (0.1.0-1) ...\r\n    Installing new version of config file /etc/my-app/pkgr.yml ...\r\n    Adding system user `my-app' (UID 105) ...\r\n    Adding new group `my-app' (GID 108) ...\r\n    Adding new user `my-app' (UID 105) with group `my-app' ...\r\n    Not creating home directory `/home/my-app'.\r\n    Starting my-app: OK.\r\n\r\nMake sure your app is running:\r\n\r\n    debian-build-machine $ ps aux | grep my-app | grep -v grep\r\n    my-app   13928  3.5 10.5 143436 40004 ?        Sl   11:06   0:02 thin server (0.0.0.0:8000) [my-app-0.1.0]\r\n\r\nNotice how the process name shows the version number? From experience, this is really useful.\r\n\r\nNow you can send a first request:\r\n\r\n    $ curl localhost:8000/\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n      <title>The page you were looking for doesn't exist (404)</title>\r\n      <style type=\"text/css\">\r\n        body { background-color: #fff; color: #666; text-align: center; font-family: arial, sans-serif; }\r\n        div.dialog {\r\n          width: 25em;\r\n          padding: 0 4em;\r\n          margin: 4em auto 0 auto;\r\n          border: 1px solid #ccc;\r\n          border-right-color: #999;\r\n          border-bottom-color: #999;\r\n        }\r\n        h1 { font-size: 100%; color: #f00; line-height: 1.5em; }\r\n      </style>\r\n    </head>\r\n\r\n    <body>\r\n      <!-- This file lives in public/404.html -->\r\n      <div class=\"dialog\">\r\n        <h1>The page you were looking for doesn't exist.</h1>\r\n        <p>You may have mistyped the address or the page may have moved.</p>\r\n      </div>\r\n    </body>\r\n    </html>\r\n\r\nObviously this app does nothing, so you'll get a 404. So go back to building your app, and then just type `rake pkgr:bump:path` and `HOST=debian-build-machine rake pkgr:build:deb` to generate a new package !\r\n\r\n## Notes of interest\r\n\r\n* your configuration files will be stored in `/etc/my-app/*.yml`, making it easy to manage with Puppet or manually (don't forget to `/etc/init.d/my-app restart` after making changes).\r\n\r\n* you can change how the Thin server is launched by adding options to the `/etc/default/my-app` file.\r\n\r\n* your log files will be stored in `/var/log/my-app/`.\r\n\r\n* your db files will be stored in `var/db/my-app/`.\r\n\r\n* if you've got migrations to run, just do a `my-app rake db:migrate` (we might want to run them automatically as part of the postinstall process).\r\n\r\n* you can launch a console using `my-app console`.\r\n\r\n* use the initd script to start and stop the app: `/etc/init.d/my-app [start|stop|status]`.\r\n\r\n## General usage\r\n\r\nDeclare `pkgr` as one of your **development** dependencies in your `Gemfile`:\r\n\r\n    gem 'pkgr', :group => :development\r\n\r\nAlso add `thin`:\r\n\r\n    gem 'thin'\r\n\r\nNow make sure you have all the gems installed:\r\n\r\n    bundle install\r\n\r\n`pkgr` will install a number of new rake tasks to handle the packaging\r\nworkflow. But first, you'll have to create a configuration file to get it\r\nworking:\r\n\r\n    rake pkgr:setup\r\n\r\nThis will create a configuration file at `config/pkgr.yml`. Edit it, and fill\r\nin details about the `name` of your application, description, and the list of\r\nruntime dependencies it depends on. Same for dependencies required at build\r\ntime only (most of the time, development headers).\r\n\r\nNow you can generate all the files required for building a debian package:\r\n\r\n    rake pkgr:generate\r\n\r\nA new directory `debian/` should have been created. You can have a look at it,\r\nbut you should not have to edit anything manually.\r\n\r\nOnce you're ready to package your app, just run the following commands:\r\n\r\n* Commit your changes (the `pkgr` app will `git archive HEAD`, which means all\r\n  your changes must be committed first -- we may want to change this):\r\n\r\n        commit -am \"...\"\r\n\r\n* Increment the version number:\r\n\r\n        rake pkgr:bump:patch # or rake pkgr:bump:minor or rake pkgr:bump:major\r\n\r\n* Build the package on your machine (default, but you better be running a\r\n  Debian Squeeze), or on a remote machine (recommended, for instance you can\r\n  get a Vagrant VM in no time):\r\n\r\n        HOST=debian-build-machine rake pkgr:build:deb\r\n        # or HOST=localhost rake pkgr:build:deb, or just rake pkgr:build:deb\r\n\r\n  Note that the user with which you're connecting to the build machine **must\r\n  have `sudo` privileges** (required to install build and runtime\r\n  dependencies).\r\n  \r\n  Also, it's most likely that you'll have to do this a few times at first, as\r\n  well as adding missing runtime and build dependencies, before your app can\r\n  be successfully packaged.\r\n\r\n* Your .deb package should be made available in the `pkg` directory of your\r\n  app. Next step is probably to upload it to a local apt repository, and then\r\n  a simple `apt-get install my-app` will install everything. Enjoy!\r\n\r\n## Requirements\r\n\r\n* You must use Rails3+ and ruby1.9+ in your application. This may work with\r\n  other rubies but then you'll need to add a rubygems dependency.\r\n\r\n* Your Rails application must be able to run with the\r\n  [`thin`](http://code.macournoyer.com/thin/) web server. Don't forget to add\r\n  `thin` to your Gemfile!\r\n\r\n* Your application must be checked into a **Git** repository. Your name and\r\n  email is taken from the git configuration, and the changelog is populated\r\n  based on the git log between two versions.\r\n\r\n## Todo\r\n\r\n* Speed up the packaging process (currently, bundler re-downloads all the gems\r\n  each time you package an app).\r\n\r\n* Include tasks for building RPMs.\r\n\r\n* Better debian initd script.\r\n\r\n* Some tests.\r\n\r\n## Authors\r\n\r\n* Cyril Rohr <cyril.rohr@gmail.com> - <http://crohr.me>\r\n\r\n## Copyright\r\n\r\nSee LICENSE (MIT)\r\n","tagline":"Package your Rails app into deb or rpm packages","google":"UA-13023229-1","note":"Don't delete this file! It's used internally to help with page regeneration."}