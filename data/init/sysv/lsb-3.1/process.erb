#!/bin/sh
# Init script for <%= name %>-<%= process_name %>-PROCESS_NUM
# Generated by pkgr, heavily borrowed from pleaserun
# Implemented based on LSB Core 3.1:
#   * Sections: 20.2, 20.3
#
### BEGIN INIT INFO
# Provides:          <%= name %>-<%= process_name %>-PROCESS_NUM
# Required-Start:    <%= name %>-<%= process_name %>
# Required-Stop:     <%= name %>-<%= process_name %>
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       <%= process_name %> component of <%= name %> (PROCESS_NUM)
### END INIT INFO

export PATH=/sbin:/usr/sbin:/bin:/usr/bin
export PORT=PORT_NUM

name="<%= name %>"
process_name="<%= process_name %>"
user="<%= user %>"
group="<%= group %>"
full_process_name="${name}-${process_name}-PROCESS_NUM"
pidfile="/var/run/${full_process_name}.pid"


start() {
  # Run the program!
  /usr/bin/${name} run ${process_name} >> /var/log/${name}/${process_name}-PROCESS_NUM.log 2>&1 &

  # Generate the pidfile from here. If we instead made the forked process
  # generate it there will be a race condition between the pidfile writing
  # and a process possibly asking for status.
  echo $! > $pidfile

  echo "${full_process_name} started."
  return 0
}

stop() {
  # Try a few times to kill TERM the program
  if status ; then
    pid=`cat "$pidfile"`
    echo "Killing ${full_process_name} (pid $pid) with SIGTERM"
    kill -TERM $pid
    # Wait for it to exit.
    for i in 1 2 3 4 5 ; do
      echo "Waiting ${full_process_name} (pid $pid) to die..."
      status || break
      sleep 1
    done
    if status ; then
      echo "${full_process_name} stop failed; still running."
    else
      echo "${full_process_name} stopped."
    fi
  fi
}

status() {
  if [ -f "$pidfile" ] ; then
    pid=`cat "$pidfile"`
    if kill -0 $pid > /dev/null 2> /dev/null ; then
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

force_stop() {
  if status ; then
    stop
    status && kill -KILL `cat "$pidfile"`
  fi
}

case "$1" in
  start) status || start ;;
  stop) stop ;;
  force-stop) force_stop ;;
  status)
    status
    code=$?
    if [ $code -eq 0 ] ; then
      echo "${full_process_name} is running"
    else
      echo "${full_process_name} is not running"
    fi
    exit $code
    ;;
  restart)
    stop && start
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|force-stop|status|restart}" >&2
    exit 3
  ;;
esac

exit $?
